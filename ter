[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..69a6cec[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m# Python specific[m
[32m+[m[32m*.pyc[m
[32m+[m[32m__pycache__/[m
[32m+[m[32m*.pyo[m
[32m+[m[32m*.pyd[m
[32m+[m
[32m+[m[32m# Virtual environment[m
[32m+[m[32mvenv/[m
[32m+[m[32m.env[m
[32m+[m
[32m+[m[32m# IDE specific[m
[32m+[m[32m.vscode/[m
[32m+[m[32m*.sublime-project[m
[32m+[m[32m*.sublime-workspace[m
[1mdiff --git a/README.md b/README.md[m
[1mdeleted file mode 100644[m
[1mindex 5b0db7d..0000000[m
[1m--- a/README.md[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-# rate-limiting-api[m
\ No newline at end of file[m
[1mdiff --git a/__pycache__/main.cpython-312.pyc b/__pycache__/main.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..db75249[m
Binary files /dev/null and b/__pycache__/main.cpython-312.pyc differ
[1mdiff --git a/main.py b/main.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e47f5ad[m
[1m--- /dev/null[m
[1m+++ b/main.py[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32mfrom fastapi import FastAPI, HTTPException, Request[m
[32m+[m[32mimport redis[m
[32m+[m
[32m+[m[32m# Initialize Redis client with cloud-hosted settings[m
[32m+[m[32mredis_client = redis.StrictRedis([m
[32m+[m[32m    host='redis-12797.c292.ap-southeast-1-1.ec2.redns.redis-cloud.com',  # Cloud Redis host[m
[32m+[m[32m    port=12797,                                                            # Cloud Redis port[m
[32m+[m[32m    password='HmQMbJB5xUBclmV44AwiKm5cgshKz6qL',                                 # Replace with your actual password[m
[32m+[m[32m    decode_responses=True[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# Initialize FastAPI app[m
[32m+[m[32mapp = FastAPI()[m
[32m+[m
[32m+[m[32m# Set rate limit: Max 5 requests per IP per minute[m
[32m+[m[32mRATE_LIMIT = 5[m
[32m+[m[32mTIME_WINDOW = 60  # 60 seconds[m
[32m+[m
[32m+[m[32m@app.get("/data")[m
[32m+[m[32masync def get_data(request: Request):[m
[32m+[m[32m    ip_address = request.client.host[m
[32m+[m
[32m+[m[32m    # Check request count for this IP[m
[32m+[m[32m    request_count = redis_client.get(ip_address)[m
[32m+[m[41m    [m
[32m+[m[32m    if request_count is None:[m
[32m+[m[32m        # First request for this IP[m
[32m+[m[32m        redis_client.set(ip_address, 1, ex=TIME_WINDOW)[m
[32m+[m[32m    elif int(request_count) >= RATE_LIMIT:[m
[32m+[m[32m        # Too many requests[m
[32m+[m[32m        raise HTTPException(status_code=429, detail="Rate limit exceeded. Try again later.")[m
[32m+[m[32m    else:[m
[32m+[m[32m        # Increment request count[m
[32m+[m[32m        redis_client.incr(ip_address)[m
[32m+[m
[32m+[m[32m    return {"message": "Here is your data!"}[m
[32m+[m
[32m+[m[32m# Root endpoint[m
[32m+[m[32m@app.get("/")[m
[32m+[m[32mdef root():[m
[32m+[m[32m    return {"message": "Welcome to the API!"}[m
[1mdiff --git a/venv/Lib/site-packages/__pycache__/typing_extensions.cpython-312.pyc b/venv/Lib/site-packages/__pycache__/typing_extensions.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..a07e260[m
Binary files /dev/null and b/venv/Lib/site-packages/__pycache__/typing_extensions.cpython-312.pyc differ
[1mdiff --git a/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/INSTALLER b/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/INSTALLER[m
[1mnew file mode 100644[m
[1mindex 0000000..a1b589e[m
[1m--- /dev/null[m
[1m+++ b/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/INSTALLER[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mpip[m
[1mdiff --git a/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/METADATA b/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/METADATA[m
[1mnew file mode 100644[m
[1mindex 0000000..3ac05cf[m
[1m--- /dev/null[m
[1m+++ b/venv/Lib/site-packages/annotated_types-0.7.0.dist-info/METADATA[m
[36m@@ -0,0 +1,295 @@[m
[32m+[m[32mMetadata-Version: 2.3[m
[32m+[m[32mName: annotated-types[m
[32m+[m[32mVersion: 0.7.0[m
[32m+[m[32mSummary: Reusable constraint types to use with typing.Annotated[m
[32m+[m[32mProject-URL: Homepage, https://github.com/annotated-types/annotated-types[m
[32m+[m[32mProject-URL: Source, https://github.com/annotated-types/annotated-types[m
[32m+[m[32mProject-URL: Changelog, https://github.com/annotated-types/annotated-types/releases[m
[32m+[m[32mAuthor-email: Adrian Garcia Badaracco <1755071+adriangb@users.noreply.github.com>, Samuel Colvin <s@muelcolvin.com>, Zac Hatfield-Dodds <zac@zhd.dev>[m
[32m+[m[32mLicense-File: LICENSE[m
[32m+[m[32mClassifier: Development Status :: 4 - Beta[m
[32m+[m[32mClassifier: Environment :: Console[m
[32m+[m[32mClassifier: Environment :: MacOS X[m
[32m+[m[32mClassifier: Intended Audience :: Developers[m
[32m+[m[32mClassifier: Intended Audience :: Information Technology[m
[32m+[m[32mClassifier: License :: OSI Approved :: MIT License[m
[32m+[m[32mClassifier: Operating System :: POSIX :: Linux[m
[32m+[m[32mClassifier: Operating System :: Unix[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3 :: Only[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.8[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.9[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.10[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.11[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.12[m
[32m+[m[32mClassifier: Topic :: Software Development :: Libraries :: Python Modules[m
[32m+[m[32mClassifier: Typing :: Typed[m
[32m+[m[32mRequires-Python: >=3.8[m
[32m+[m[32mRequires-Dist: typing-extensions>=4.0.0; python_version < '3.9'[m
[32m+[m[32mDescription-Content-Type: text/markdown[m
[32m+[m
[32m+[m[32m# annotated-types[m
[32m+[m
[32m+[m[32m[![CI](https://github.com/annotated-types/annotated-types/workflows/CI/badge.svg?event=push)](https://github.com/annotated-types/annotated-types/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[m
[32m+[m[32m[![pypi](https://img.shields.io/pypi/v/annotated-types.svg)](https://pypi.python.org/pypi/annotated-types)[m
[32m+[m[32m[![versions](https://img.shields.io/pypi/pyversions/annotated-types.svg)](https://github.com/annotated-types/annotated-types)[m
[32m+[m[32m[![license](https://img.shields.io/github/license/annotated-types/annotated-types.svg)](https://github.com/annotated-types/annotated-types/blob/main/LICENSE)[m
[32m+[m
[32m+[m[32m[PEP-593](https://peps.python.org/pep-0593/) added `typing.Annotated` as a way of[m
[32m+[m[32madding context-specific metadata to existing types, and specifies that[m
[32m+[m[32m`Annotated[T, x]` _should_ be treated as `T` by any tool or library without special[m
[32m+[m[32mlogic for `x`.[m
[32m+[m
[32m+[m[32mThis package provides metadata objects which can be used to represent common[m
[32m+[m[32mconstraints such as upper and lower bounds on scalar values and collection sizes,[m
[32m+[m[32ma `Predicate` marker for runtime checks, and[m
[32m+[m[32mdescriptions of how we intend these metadata to be interpreted. In some cases,[m
[32m+[m[32mwe also note alternative representations which do not require this package.[m
[32m+[m
[32m+[m[32m## Install[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mpip install annotated-types[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Examples[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32mfrom typing import Annotated[m
[32m+[m[32mfrom annotated_types import Gt, Len, Predicate[m
[32m+[m
[32m+[m[32mclass MyClass:[m
[32m+[m[32m    age: Annotated[int, Gt(18)]                         # Valid: 19, 20, ...[m
[32m+[m[32m                                                        # Invalid: 17, 18, "19", 19.0, ...[m
[32m+[m[32m    factors: list[Annotated[int, Predicate(is_prime)]]  # Valid: 2, 3, 5, 7, 11, ...[m
[32m+[m[32m                                                        # Invalid: 4, 8, -2, 5.0, "prime", ...[m
[32m+[m
[32m+[m[32m    my_list: Annotated[list[int], Len(0, 10)]           # Valid: [], [10, 20, 30, 40, 50][m
[32m+[m[32m                                                        # Invalid: (1, 2), ["abc"], [0] * 20[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Documentation[m
[32m+[m
[32m+[m[32m_While `annotated-types` avoids runtime checks for performance, users should not[m
[32m+[m[32mconstruct invalid combinations such as `MultipleOf("non-numeric")` or `Annotated[int, Len(3)]`.[m
[32m+[m[32mDownstream implementors may choose to raise an error, emit a warning, silently ignore[m
[32m+[m[32ma metadata item, etc., if the metadata objects described below are used with an[m
[32m+[m[32mincompatible type - or for any other reason!_[m
[32m+[m
[32m+[m[32m### Gt, Ge, Lt, Le[m
[32m+[m
[32m+[m[32mExpress inclusive and/or exclusive bounds on orderable values - which may be numbers,[m
[32m+[m[32mdates, times, strings, sets, etc. Note that the boundary value need not be of the[m
[32m+[m[32msame type that was annotated, so long as they can be compared: `Annotated[int, Gt(1.5)]`[m
[32m+[m[32mis fine, for example, and implies that the value is an integer x such that `x > 1.5`.[m
[32m+[m
[32m+[m[32mWe suggest that implementors may also interpret `functools.partial(operator.le, 1.5)`[m
[32m+[m[32mas being equivalent to `Gt(1.5)`, for users who wish to avoid a runtime dependency on[m
[32m+[m[32mthe `annotated-types` package.[m
[32m+[m
[32m+[m[32mTo be explicit, these types have the following meanings:[m
[32m+[m
[32m+[m[32m* `Gt(x)` - value must be "Greater Than" `x` - equivalent to exclusive minimum[m
[32m+[m[32m* `Ge(x)` - value must be "Greater than or Equal" to `x` - equivalent to inclusive minimum[m
[32m+[m[32m* `Lt(x)` - value must be "Less Than" `x` - equivalent to exclusive maximum[m
[32m+[m[32m* `Le(x)` - value must be "Less than or Equal" to `x` - equivalent to inclusive maximum[m
[32m+[m
[32m+[m[32m### Interval[m
[32m+[m
[32m+[m[32m`Interval(gt, ge, lt, le)` allows you to specify an upper and lower bound with a single[m
[32m+[m[32mmetadata object. `None` attributes should be ignored, and non-`None` attributes[m
[32m+[m[32mtreated as per the single bounds above.[m
[32m+[m
[32m+[m[32m### MultipleOf[m
[32m+[m
[32m+[m[32m`MultipleOf(multiple_of=x)` might be interpreted in two ways:[m
[32m+[m
[32m+[m[32m1. Python semantics, implying `value % multiple_of == 0`, or[m
[32m+[m[32m2. [JSONschema semantics](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.2.1),[m
[32m+[m[32m   where `int(value / multiple_of) == value / multiple_of`.[m
[32m+[m
[32m+[m[32mWe encourage users to be aware of these two common interpretations and their[m
[32m+[m[32mdistinct behaviours, especially since very large or non-integer numbers make[m
[32m+[m[32mit easy to cause silent data corruption due to floating-point imprecision.[m
[32m+[m
[32m+[m[32mWe encourage libraries to carefully document which interpretation they implement.[m
[32m+[m
[32m+[m[32m### MinLen, MaxLen, Len[m
[32m+[m
[32m+[m[32m`Len()` implies that `min_length <= len(value) <= max_length` - lower and upper bounds are inclusive.[m
[32m+[m
[32m+[m[32mAs well as `Len()` which can optionally include upper and lower bounds, we also[m
[32m+[m[32mprovide `MinLen(x)` and `MaxLen(y)` which are equivalent to `Len(min_length=x)`[m
[32m+[m[32mand `Len(max_length=y)` respectively.[m
[32m+[m
[32m+[m[32m`Len`, `MinLen`, and `MaxLen` may be used with any type which supports `len(value)`.[m
[32m+[m
[32m+[m[32mExamples of usage:[m
[32m+[m
[32m+[m[32m* `Annotated[list, MaxLen(10)]` (or `Annotated[list, Len(max_length=10))`) - list must have a length of 10 or less[m
[32m+[m[32m* `Annotated[str, MaxLen(10)]` - string must have a length of 10 or less[m
[32m+[m[32m* `Annotated[list, MinLen(3))` (or `Annotated[list, Len(min_length=3))`) - list must have a length of 3 or more[m
[32m+[m[32m* `Annotated[list, Len(4, 6)]` - list must have a length of 4, 5, or 6[m
[32m+[m[32m* `Annotated[list, Len(8, 8)]` - list must have a length of exactly 8[m
[32m+[m
[32m+[m[32m#### Changed in v0.4.0[m
[32m+[m
[32m+[m[32m* `min_inclusive` has been renamed to `min_length`, no change in meaning[m
[32m+[m[32m* `max_exclusive` has been renamed to `max_length`, upper bound is now **inclusive** instead of **exclusive**[m
[32m+[m[32m* The recommendation that slices are interpreted as `Len` has been removed due to ambiguity and different semantic[m
[32m+[m[32m  meaning of the upper bound in slices vs. `Len`[m
[32m+[m
[32m+[m[32mSee [issue #23](https://github.com/annotated-types/annotated-types/issues/23) for discussion.[m
[32m+[m
[32m+[m[32m### Timezone[m
[32m+[m
[32m+[m[32m`Timezone` can be used with a `datetime` or a `time` to express which timezones[m
[32m+[m[32mare allowed. `Annotated[datetime, Timezone(None)]` must be a naive datetime.[m
[32m+[m[32m`Timezone[...]` ([literal ellipsis](https://docs.python.org/3/library/constants.html#Ellipsis))[m
[32m+[m[32mexpresses that any timezone-aware datetime is allowed. You may also pass a specific[m
[32m+[m[32mtimezone string or [`tzinfo`](https://docs.python.org/3/library/datetime.html#tzinfo-objects)[m
[32m+[m[32mobject such as `Timezone(timezone.utc)` or `Timezone("Africa/Abidjan")` to express that you only[m
[32m+[m[32mallow a specific timezone, though we note that this is often a symptom of fragile design.[m
[32m+[m
[32m+[m[32m#### Changed in v0.x.x[m
[32m+[m
[32m+[m[32m* `Timezone` accepts [`tzinfo`](https://docs.python.org/3/library/datetime.html#tzinfo-objects) objects instead of[m
[32m+[m[32m  `timezone`, extending compatibility to [`zoneinfo`](https://docs.python.org/3/library/zoneinfo.html) and third party libraries.[m
[32m+[m
[32m+[m[32m### Unit[m
[32m+[m
[32m+[m[32m`Unit(unit: str)` expresses that the annotated numeric value is the magnitude of[m
[32m+[m[32ma quantity with the specified unit. For example, `Annotated[float, Unit("m/s")]`[m
[32m+[m[32mwould be a float representing a velocity in meters per second.[m
[32m+[m
[32m+[m[32mPlease note that `annotated_types` itself makes no attempt to parse or validate[m
[32m+[m[32mthe unit string in any way. That is left entirely to downstream libraries,[m
[32m+[m[32msuch as [`pint`](https://pint.readthedocs.io) or[m
[32m+[m[32m[`astropy.units`](https://docs.astropy.org/en/stable/units/).[m
[32m+[m
[32m+[m[32mAn example of how a library might use this metadata:[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32mfrom annotated_types import Unit[m
[32m+[m[32mfrom typing import Annotated, TypeVar, Callable, Any, get_origin, get_args[m
[32m+[m
[32m+[m[32m# given a type annotated with a unit:[m
[32m+[m[32mMeters = Annotated[float, Unit("m")][m
[32m+[m
[32m+[m
[32m+[m[32m# you can cast the annotation to a specific unit type with any[m
[32m+[m[32m# callable that accepts a string and returns the desired type[m
[32m+[m[32mT = TypeVar("T")[m
[32m+[m[32mdef cast_unit(tp: Any, unit_cls: Callable[[str], T]) -> T | None:[m
[32m+[m[32m    if get_origin(tp) is Annotated:[m
[32m+[m[32m        for arg in get_args(tp):[m
[32m+[m[32m            if isinstance(arg, Unit):[m
[32m+[m[32m                return unit_cls(arg.unit)[m
[32m+[m[32m    return None[m
[32m+[m
[32m+[m
[32m+[m[32m# using `pint`[m
[32m+[m[32mimport pint[m
[32m+[m[32mpint_unit = cast_unit(Meters, pint.Unit)[m
[32m+[m
[32m+[m
[32m+[m[32m# using `astropy.units`[m
[32m+[m[32mimport astropy.units as u[m
[32m+[m[32mastropy_unit = cast_unit(Meters, u.Unit)[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Predicate[m
[32m+[m
[32m+[m[32m`Predicate(func: Callable)` expresses that `func(value)` is truthy for valid values.[m
[32m+[m[32mUsers should prefer the statically inspectable metadata above, but if you need[m
[32m+[m[32mthe full power and flexibility of arbitrary runtime predicates... here it is.[m
[32m+[m
[32m+[m[32mFor some common constraints, we provide generic types:[m
[32m+[m
[32m+[m[32m* `IsLower       = Annotated[T, Predicate(str.islower)]`[m
[32m+[m[32m* `IsUpper       = Annotated[T, Predicate(str.isupper)]`[m
[32m+[m[32m* `IsDigit       = Annotated[T, Predicate(str.isdigit)]`[m
[32m+[m[32m* `IsFinite      = Annotated[T, Predicate(math.isfinite)]`[m
[32m+[m[32m* `IsNotFinite   = Annotated[T, Predicate(Not(math.isfinite))]`[m
[32m+[m[32m* `IsNan         = Annotated[T, Predicate(math.isnan)]`[m
[32m+[m[32m* `IsNotNan      = Annotated[T, Predicate(Not(math.isnan))]`[m
[32m+[m[32m* `IsInfinite    = Annotated[T, Predicate(math.isinf)]`[m
[32m+[m[32m* `IsNotInfinite = Annotated[T, Predicate(Not(math.isinf))]`[m
[32m+[m
[32m+[m[32mso that you can write e.g. `x: IsFinite[float] = 2.0` instead of the longer[m
[32m+[m[32m(but exactly equivalent) `x: Annotated[float, Predicate(math.isfinite)] = 2.0`.[m
[32m+[m
[32m+[m[32mSome libraries might have special logic to handle known or understandable predicates,[m
[32m+[m[32mfor example by checking for `str.isdigit` and using its presence to both call custom[m
[32m+[m[32mlogic to enforce digit-only strings, and customise some generated external schema.[m
[32m+[m[32mUsers are therefore encouraged to avoid indirection like `lambda s: s.lower()`, in[m
[32m+[m[32mfavor of introspectable methods such as `str.lower` or `re.compile("pattern").search`.[m
[32m+[m
[32m+[m[32mTo enable basic negation of commonly used predicates like `math.isnan` without introducing introspection that makes it impossible for implementers to introspect the predicate we provide a `Not` wrapper that simply negates the predicate in an introspectable manner. Several of the predicates listed above are created in this manner.[m
[32m+[m
[32m+[m[32mWe do not specify what behaviour should be expected for predicates that raise[m
[32m+[m[32man exception.  For example `Annotated[int, Predicate(str.isdigit)]` might silently[m
[32m+[m[32mskip invalid constraints, or statically raise an error; or it might try calling it[m
[32m+[m[32mand then propagate or discard the resulting[m
[32m+[m[32m`TypeError: descriptor 'isdigit' for 'str' objects doesn't apply to a 'int' object`[m
[32m+[m[32mexception.  We encourage libraries to document the behaviour they choose.[m
[32m+[m
[32m+[m[32m### Doc[m
[32m+[m
[32m+[m[32m`doc()` can be used to add documentation information in `Annotated`, for function and method parameters, variables, class attributes, return types, and any place where `Annotated` can be used.[m
[32m+[m
[32m+[m[32mIt expects a value that can be statically analyzed, as the main use case is for static analysis, editors, documentation generators, and similar tools.[m
[32m+[m
[32m+[m[32mIt returns a `DocInfo` class with a single attribute `documentation` containing the value passed to `doc()`.[m
[32m+[m
[32m+[m[32mThis is the early adopter's alternative form of the [`typing-doc` proposal](https://github.com/tiangolo/fastapi/blob/typing-doc/typing_doc.md).[m
[32m+[m
[32m+[m[32m### Integrating downstream types with `GroupedMetadata`[m
[32m+[m
[32m+[m[32mImplementers may choose to provide a convenience wrapper that groups multiple pieces of metadata.[m
[32m+[m[32mThis can help reduce verbosity and cognitive overhead for users.[m
[32m+[m[32mFor example, an implementer like Pydantic might provide a `Field` or `Meta` type that accepts keyword arguments and transforms these into low-level metadata:[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32mfrom dataclasses import dataclass[m
[32m+[m[32mfrom typing import Iterator[m
[32m+[m[32mfrom annotated_types import GroupedMetadata, Ge[m
[32m+[m
[32m+[m[32m@dataclass[m
[32m+[m[32mclass Field(GroupedMetadata):[m
[32m+[m[32m    ge: int | None = None[m
[32m+[m[32m 